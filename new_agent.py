from pydantic import BaseModel
import requests
import socket
import time
from pythonping import ping as pping
from typing import List, Union
from fastapi import FastAPI, Request, Response

app = FastAPI()

# –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: 
# [bool (—É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞), float (–≤—Ä–µ–º—è –≤ –º—Å) –∏–ª–∏ list[str] (—Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤)]
# –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Ping, HTTP –∏ TCP-–ø–æ—Ä—Ç–∞: [bool (—É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞), float (–≤—Ä–µ–º—è –≤ –º—Å)]
TimeResult = List[Union[bool, float]]
# –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Traceroute: [bool (—É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞), list[str] (—Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤)]
TraceResult = List[Union[bool, List[str]]]

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
MAX_HOPS = 30
# –ü–æ—Ä—Ç –¥–ª—è TCP-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º 80)
TRACE_PORT = 80 
# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä—ã–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
HOP_TIMEOUT = 1.0 

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP/HTTPS
def check_http_https(host: str) -> TimeResult:
    protocols = ['https://', 'http://']
    timeout = 5
    
    for proto in protocols:
        url = proto + host
        try:
            start_time = time.time()
            requests.head(url, timeout=timeout, allow_redirects=True)
            elapsed_time = (time.time() - start_time) * 1000 
            elapsed_time = round(elapsed_time)
            return [True, elapsed_time]
        except requests.exceptions.RequestException:
            continue
            
    # –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return [False, 0.0]

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Ping (ICMP)
def check_ping(host: str) -> TimeResult:
    try:
        response_list = pping(host, count=3, timeout=2, verbose=False)
        
        if response_list.success:
            # pythonping –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º—Å
            return [True, response_list.rtt_avg_ms * 1000]
        else:
            return [False, 0.0]
    except Exception:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç)
        return [False, 0.0]

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP-–ø–æ—Ä—Ç–∞
def check_tcp_port(host: str, port: int = 80) -> TimeResult:
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)

        start_time = time.time()
        result = sock.connect_ex((host, port))
        # –ü–ï–†–ï–í–ï–î–ï–ù–û –í –ú–ò–õ–õ–ò–°–ï–ö–£–ù–î–´
        elapsed_time = (time.time() - start_time) * 1000 
        sock.close()

        if result == 0:
            return [True, round(elapsed_time)]
        else:
            return [False, 0.0]

    except (socket.gaierror, Exception):
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç)
        return [False, 0.0]

# 4. Traceroute (–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è TCP-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
# NOTE: –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ IP-–∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —É–∑–ª–æ–≤ –±–µ–∑ –ø—Ä–∞–≤ 
# –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–ª–∏ –≤—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–µ–π —É—Ç–∏–ª–∏—Ç—ã.
# –Ø –∞–¥–∞–ø—Ç–∏—Ä—É—é –≤–∞—à –∫–æ–¥ –∫ —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –≤—ã–≤–æ–¥–∞, –¥–µ–ª–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ 
# –ø—Ä–æ—Å—Ç–æ–π (–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—â–µ–π root).

def check_traceroute(host: str) -> TraceResult:
    route_list = []
    
    try:
        dest_ip = socket.gethostbyname(host)
    except socket.gaierror:
        return [False, ["–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è."]]

    for ttl in range(1, MAX_HOPS + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(HOP_TIMEOUT)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–∫–µ—Ç–∞
        if hasattr(socket, 'IP_TTL'):
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_TTL, ttl)
        # –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –±–µ–∑ root —á–∞—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, 
        # –ø–æ—ç—Ç–æ–º—É –∫–æ–¥ –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ Windows –∏–ª–∏ —Å cap_net_raw.

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SYN-–ø–∞–∫–µ—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø–æ—Ä—Ç
            sock.connect((dest_ip, TRACE_PORT))
            
            # –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            route_list.append(dest_ip)
            sock.close()
            return [True, route_list]

        except socket.timeout:
            # –¢–∞–π–º–∞—É—Ç - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —É–∑–ª–∞ –±–µ–∑ root
            route_list.append('* * *')
        
        except socket.error as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ TTL –∏—Å—Ç–µ–∫ –∏ 
            # –û–° –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∞ ICMP Time Exceeded (–æ—á–µ–Ω—å –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ –±–µ–∑ root).
            
            # –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–¥–µ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å IP —É–∑–ª–∞ –±–µ–∑ —Å—ã—Ä—ã—Ö —Å–æ–∫–µ—Ç–æ–≤.
            # –ï—Å–ª–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏ 10061 (Connection Refused), –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏.
            if e.errno == 10061: 
                route_list.append(dest_ip)
                return [True, route_list]
            
            route_list.append('* * *') # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç

        finally:
            if 'sock' in locals():
                 sock.close()
            
        if ttl == MAX_HOPS:
            # –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –±–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
            return [False, route_list]
            
    return [False, ["–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—É–¥–∞—á–µ–π."]]

#Api

class reportFromAgent(BaseModel):
    country: str
    UIID: str
    taskUIID: str
    result: str

class checkRequest(BaseModel):
    target: str
    task: str

@app.post("/check")
def check(validReq: checkRequest):
    match validReq.task:
        case "http(s)":
            return check_http_https(validReq.target)
        case "ping":
            return check_ping(validReq.target)

if __name__ == '__main__':
    HOST_TO_TEST = "apple.com"

    print(f"========================================\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞: {HOST_TO_TEST}\n========================================")

    # 1. HTTP/HTTPS
    http_result = check_http_https(HOST_TO_TEST)
    print(f"üåê HTTP/HTTPS (bool, time_ms): {http_result}")

    # 2. Ping
    ping_result = check_ping(HOST_TO_TEST)
    print(f"üü¢ Ping (bool, avg_time_ms): {ping_result}")

    # 3. TCP-–ø–æ—Ä—Ç (443)
    tcp_443_result = check_tcp_port(HOST_TO_TEST, port=443)
    print(f"üö™ TCP-–ø–æ—Ä—Ç 443 (bool, time_ms): {tcp_443_result}")

    # 4. Traceroute (TCP-—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –∞–¥–º–∏–Ω–∞)
    trace_result = check_traceroute(HOST_TO_TEST)
    print(f"\n--- üõ£Ô∏è Traceroute (bool, IP_List) ---")
    print(f"–£—Å–ø–µ—Ö: {trace_result}")
